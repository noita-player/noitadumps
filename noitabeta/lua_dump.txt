ActionUsed
ActionUsesRemainingChanged
AddFlagPersistent( key ) -> bool_is_new
AddMaterialInventoryMaterial( entity_id, material_name, count )
AutosaveDisable
BaabInstruction( name )
BeginProjectile( entity_filename )
BeginTriggerDeath
BeginTriggerHitWorld
BeginTriggerTimer
BiomeMapGetName( [optional]x, [optional]y ) -> name
BiomeMapGetPixel( x, y ) -> color_int [This is available if BIOME_MAP in magic_numbers.xml points to a lua file, in the context of that file.]
BiomeMapGetSize
BiomeMapGetVerticalPositionInsideBiome( x, y ) -> number
BiomeMapLoadImageCropped
BiomeMapLoadImageCropped( x, y, path, image_x, image_y, image_w, image_h ) [This is available if BIOME_MAP in magic_numbers.xml points to a lua file, in the context of that file.]
BiomeMapSetPixel( x, y, color_int ) [This is available if BIOME_MAP in magic_numbers.xml points to a lua file, in the context of that file.]
BiomeMapSetSize( w, h ) [This is available if BIOME_MAP in magic_numbers.xml points to a lua file, in the context of that file.]
CellFactory_GetAllFires( include_statics = true ) -> {string}
CellFactory_GetAllGases( include_statics = true ) -> {string}
CellFactory_GetAllLiquids( include_statics = true ) -> {string}
CellFactory_GetAllSands( include_statics = true ) -> {string}
CellFactory_GetAllSolids( include_statics = true ) -> {string}
CellFactory_GetName( int material_id ) -> string
CellFactory_GetType( string material_name ) -> int
ComponentGetMembers( component_id ) -> {string-string} [returns a string-indexed table of string]
ComponentGetMetaCustom( component_id, variable_name ) -> string|nil
ComponentGetValue( component_id, variable_name ) -> string|nil
ComponentGetValueBool( component_id, variable_name ) -> bool
ComponentGetValueFloat( component_id, variable_name ) -> number
ComponentGetValueInt( component_id, variable_name ) -> int
ComponentGetValueVector2( component_id, variable_name ) -> x,y
ComponentGetVector( component_id, array_name, type ) -> {multiple types}|nil
ComponentGetVectorSize
ComponentGetVectorValue( component_id, array_name, type, i ) -> multiple return types|nil
ComponentObjectGetMembers( component_id, object_name ) -> {string-string}|nil [returns a string-indexed table of string]
ComponentObjectGetValueBool( component_id, object_name, variable_name ) -> string|nil
ComponentObjectSetValue( component_id, object_name, variable_name, value )
ComponentSetMetaCustom( component_id, variable_name, value )
ComponentSetValue( component_id, variable_name, value )
ComponentSetValueValueRangeInt
ComponentSetValueValueRangeInt( component_id, variable_name, min, max )
ComponentSetValueVector2( component_id, variable_name, x, y )
ConvertEverythingToGold
CreateItemActionEntity( action_id, [optional]x, [optional]y ) -> entity_id
DEBUG_GetMouseWorld
DEBUG_MARK( x, y, string message="", color_r=1, color_g=0, color_b=0 )
DebugEnableTrailerMode
DebugGetIsDevBuild
Debug_SaveTestPlayer
EndProjectile
EndTrigger
EntityAddChild( parent_id, child_id )
EntityAddComponent( entity_id, component_type_name, [optional]table_of_component_values ) -> component_id
EntityAddTag( entity_id, tag )
EntityConvertToMaterial( entity_id, string material )
EntityCreateNew( [optional]name ) -> entity_id
EntityGetAllChildren( entity_id ) -> {entity_id}|nil
EntityGetAllComponents( entity_id ) -> {component_id}
EntityGetClosestWithTag
EntityGetClosestWithTag( pos_x, pos_y, string tag ) -> entity_id
EntityGetComponent( entity_id, component_type_name ) -> {component_id}|nil
EntityGetFirstComponent( entity_id, component_type_name, [optional]tag ) -> component_id
EntityGetInRadiusWithTag
EntityGetInRadiusWithTag( pos_x, pos_y, radius, entity_tag ) -> {entity_id}
EntityGetIsAlive
EntityGetName( entity_id ) -> string
EntityGetParent( entity_id ) -> entity_id
EntityGetTags( entity_id ) -> string|nil [string is comma separated]
EntityGetTransform( entity_id ) -> x,y,rotation,scale_x,scale_y
EntityGetWithName( name ) -> entity_id
EntityGetWithTag( entity_tag ) -> {entity_id}
EntityHasTag( entity_id, tag ) -> bool
EntityKill( entity_id )
EntityLoadCameraBound
EntityLoadCameraBound( filename, [optional]pos_x, [optional]pos_y )
EntityRemoveComponent( entity_id, component_id )
EntityRemoveFromParent( entity_id )
EntityRemoveTag( entity_id, tag )
EntitySave
EntitySetComponentIsEnabled( entity_id, component_id, is_enabled )
EntitySetComponentsWithTagEnabled( entity_id, tag, enabled )
EntitySetName( entity_id, name )
EntitySetTransform( entity_id, x, [optional]y, [optional]rotation, [optional]scale_x, [optional]scale_y )
FindFreePositionForBody( ideal_pos_x, idea_pos_y, velocity_x, velocity_y, body_radius ) -> x,y
GameAddFlagRun( flag )
GameCreateParticle( string material_name, x, y, how_many, xvel, yvel, just_visual, [optional]draw_as_long )
GameDoEnding2
GameDropAllItems( entity_id )
GameEntityPlaySound( entity, event_name )
GameGetCameraPos
GameGetFrameNum
GameGetGameEffect( entity_id, string GAME_EFFECT ) -> component_id
GameGetGameEffectCount( entity_id, string GAME_EFFECT ) -> uint
GameGetIsGamepadConnected
GameGetIsTrailerModeEnabled
GameGetOrbCollectedAllTime( int orb_id_zero_based ) -> bool
GameGetOrbCollectedThisRun( int orb_id_zero_based ) -> bool
GameGetOrbCountAllTime
GameGetOrbCountThisRun
GameGetPlayerStatsEntity
GameGetPotionColorUint
GameGetRealWorldTimeSinceStarted
GameGetVelocityCompVelocity( entity_id ) -> x,y
GameGetWorldStateEntity
GameHasFlagRun( flag ) -> bool
GameIsDailyRun( entity ) -> bool
GameIsIntroPlaying
GameKillInventoryItem( who_picks_up_entity_id, item_entity_id )
GameOnCompleted
GamePickUpInventoryItem
GamePlayAnimation( entity_id, name, priority, [followup_name], [followup_priority] )
GamePlaySound( bank_filename, event_path, x, y )
GamePrintImportant
GamePrintImportant( string title, description )
GameRegenItemAction( entity_id )
GameRegenItemActionsInContainer( entity_id )
GameRegenItemActionsInPlayer( entity_id )
GameRemoveFlagRun( flag )
GameScreenshake( strength, [optional]pos_x, [optional]pos_y )
GameSetCameraFree( is_free )
GameSetCameraPos( x, y )
GameShootProjectile( who_shot, x, y, target_x, target_y, projectile_entity, send_message )
GameTextGet( key, [optional] param0, [optional] param1, [optional] param2 ) -> string
GameTextGetTranslatedOrNot( text_or_key ) -> string
GameTriggerMusicCue( name )
GameTriggerMusicEvent( event_path, can_be_faded, x, y )
GameTriggerMusicFadeOutAndDequeueAll( [optional]relative_fade_speed )
GameVecToPhysicsVec( x, [optional]y ) -> x,y
GenomeSetHerdId( entity_id, string new_herd_id )
GetGameEffectLoadTo( entity_id, string game_effect_entity_file, always_load_new ) -> effect_component_id
GetRandomActionWithType
GetSurfaceNormal( pos_x, pos_y, ray_length, ray_count ) -> found_normal,normal_x,normal_y,approximate_distance_from_surface
GetUpdatedComponentID
GetUpdatedEntityID
GetValueBool( key, default_value )
GetValueInteger( key, default_value )
GetValueNumber( key, default_value )
GlobalsGetValue( key, default_value = "" )
GlobalsSetValue( key, value )
GuiButton( gui, x, y, text, id ) -> bool_clicked
GuiCreate
GuiDestroy( gui )
GuiLayoutAddHorizontalSpacing( gui )
GuiLayoutAddVerticalSpacing( gui )
GuiLayoutBeginHorizontal( gui, x_rel, y_rel )
GuiLayoutBeginVertical( gui, x_rel, y_rel  )
GuiLayoutEnd( gui )
GuiStartFrame( gui )
GuiTextCentered
GuiTextCentered( gui, x, y, text )
HasFlagPersistent( key ) -> bool
IsPlayer( entity ) -> bool
LUI_GetSliderValue( sprite_id )
LUI_GetValue( key )
LUI_LoadSlider( filename, start_x, start_y, end_x, end_y )
LUI_LoadSprite( filename )
LUI_LoadTextSprite( filename )
LUI_SetCallbacks( callback_name, callback_function )
LUI_SetSliderValue( sprite_id, value )
LUI_SetTimeOut( float time_to_execute, string callback_function )
LUI_SpriteAddAsChild( sprite_father, sprite_child )
LUI_SpriteBringToFront( sprite_id )
LUI_SpriteKill( sprite_id )
LUI_SpriteMoveTo( sprite_id, x, y )
LUI_SpritePauseRectAnimation( sprite_id )
LUI_SpritePlayRectAnimation( sprite_id, rect_animation )
LUI_SpriteSendToBack( sprite_id )
LUI_SpriteSetAlpha( sprite_id, alpha )
LUI_SpriteSetCenterOffset( sprite_id, x, y )
LUI_SpriteSetColor( sprite_id, r, g, b )
LUI_SpriteSetName( sprite_id, name )
LUI_SpriteSetRotation( sprite_id, rotation )
LUI_SpriteSetScale( sprite_id, x, y )
LUI_SpriteSetText( sprite_id, text )
LUI_StoreValue( key, value )
LUI_TweenClearAll( sprite_id )
LUI_TweenReverse( sprite_id )
LUI_TweenSpriteAlphaTo( sprite_id, alpha, time, easing_name )
LUI_TweenSpriteRotationTo( sprite_id, rotation, time, easing_name )
LUI_TweenSpriteScaleTo( sprite_id, scale_x, scale_y, time, easing_name )
LUI_TweenSpriteTo( sprite_id, target_x, target_y, time, easing_name )
LoadEntityToStash( entity_file, stash_id )
LoadGameEffectEntityTo( entity_id, string game_effect_entity_file ) -> effect_entity_id
LoadPixelScene( string materials_filename, string colors_filename, x, y, string background_file, skip_biome_checks = false, skip_edge_textures = false, color_to_material_table = {} )
LogAction( action_name )
LooseChunk( world_pos_x, world_pos_y, image_filename, [optional] max_durability )
Lua - error - SetTimeOut( time_to_execute, file_to_execute, function_to_call) , file_to_execute was NULL
MagicNumbersGetValue( key )
ModDevGenerateSpriteUVsForDirectory( directory_path ) [Only available via noita_dev.exe]
ModLuaFileAppend( to_filename, from_filename )
ModMagicNumbersFileAdd( filename )
ModMaterialsFileAdd( filename )
ModRegisterAudioEventMappings( filename )
OnActionPlayed( action_id )
OnNotEnoughManaForAction
PhysicsAddBodyCreateBox
PhysicsAddBodyImage( entity_id, material, offset_x, offset_y, width, height, bool centered = false ) -> int_body_id|nil
PhysicsAddJoint( entity_id, body_id0, body_id1, offset_x, offset_y, string joint_type ) -> int_joint_id
PhysicsApplyForce( entity_id, float force_x, float force_y )
PhysicsApplyTorqueToComponent
PhysicsApplyTorqueToComponent( entity_id, component_id, float torque )
PhysicsGetComponentAngularVelocity( entity_id, component_id ) -> vel
PhysicsGetComponentVelocity( entity_id, component_id ) -> vel_x,vel_y
PhysicsRemoveJoints( world_pos_min_x, world_pos_min_y, world_pos_max_x, world_pos_max_y  )
PhysicsSetStatic( entity_id, bool is_static )
PhysicsVecToGameVec( x, [optional]y ) -> x,y
ProceduralRandom
RandomDistribution
RandomDistributionf
RandomDistributionf( min, max, mean, (sharpness=1.f), (baseline=0.005) ) -> number
Raytrace( x1, y1, x2, y2 ) -> did_hit,hit_x,hit_y
Reflection_RegisterProjectile
RegisterGunAction
RegisterGunAction
RegisterGunShotEffects
RegisterPerk
RegisterSpawnFunction( uint32 color, string function_name )
RemoveFlagPersistent( key )
SetPlayerSpawnLocation( x, y )
SetProjectileConfigs
SetRandomSeed(x,y)
SetValueBool( key, value )
SetValueInteger( key, value )
SetValueNumber( key, value )
SpawnActionItem( x, y, level )
SpawnApparition( x, y, level ) -> int,entity_id
SpawnStash( x, y, level, action_count ) -> entity_id
StartReload
StatsBiomeGetValue( key ) -> string
StatsBiomeReset
StatsGetValue( key ) -> string
StatsLogPlayerKill
UnlockItem( action_id )
__loaded={} dofile=function(filename) local f=__loaded[filename] if f==nil then f,err=loadfile(filename) if f==nil then return f,err end __loaded[filename]=f end local result = f() do_mod_appends(filename) return result end
print
print_error
print_error
